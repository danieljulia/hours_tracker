/**
 * Copyright 2014-present Palantir Technologies
 * @license MIT
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var d3 = require("d3");
var svgDrawer_1 = require("./svgDrawer");
var RectangleSVGDrawer = (function (_super) {
    __extends(RectangleSVGDrawer, _super);
    function RectangleSVGDrawer(_rootClassName) {
        if (_rootClassName === void 0) { _rootClassName = ""; }
        var _this = _super.call(this, "rect", "") || this;
        _this._rootClassName = _rootClassName;
        _this._root.classed(_this._rootClassName, true);
        return _this;
    }
    return RectangleSVGDrawer;
}(svgDrawer_1.SVGDrawer));
exports.RectangleSVGDrawer = RectangleSVGDrawer;
exports.RectangleCanvasDrawStep = function (context, data, attrToAppliedProjector) {
    data.forEach(function (point, index) {
        var resolvedAttrs = Object.keys(attrToAppliedProjector).reduce(function (obj, attrName) {
            obj[attrName] = attrToAppliedProjector[attrName](point, index);
            return obj;
        }, {});
        context.beginPath();
        context.rect(resolvedAttrs["x"], resolvedAttrs["y"], resolvedAttrs["width"], resolvedAttrs["height"]);
        if (resolvedAttrs["stroke-width"]) {
            context.lineWidth = resolvedAttrs["stroke-width"];
        }
        if (resolvedAttrs["stroke"]) {
            var strokeColor = d3.color(resolvedAttrs["stroke"]);
            if (resolvedAttrs["opacity"]) {
                strokeColor.opacity = resolvedAttrs["opacity"];
            }
            context.strokeStyle = strokeColor.rgb().toString();
            context.stroke();
        }
        if (resolvedAttrs["fill"]) {
            var fillColor = d3.color(resolvedAttrs["fill"]);
            if (resolvedAttrs["opacity"]) {
                fillColor.opacity = resolvedAttrs["opacity"];
            }
            context.fillStyle = fillColor.rgb().toString();
            context.fill();
        }
    });
};
